---
- name: Wait for ACME certificates if needed
  ansible.builtin.wait_for:
    path: "{{ item }}"
    sleep: 10
  loop: "{{ _acme_existing_certs.results | selectattr('stat.exists', '==', false) | map(attribute='invocation.module_args.path') }}"
  when: tls_acme | bool

- name: Copy some init scripts
  ansible.builtin.copy:
    src: "scripts/{{ item }}"
    dest: "{{ bimdata_path }}/scripts/"
    mode: "0640"
  loop:
    - create_connect_provider.py
    - create_apps.py
    - create_webhook_notifs.py

- name: Wait for IAM to respond
  ansible.builtin.uri:
    url: "{{ urls['iam'] }}/auth/"
    method: GET
    status_code: 200
    ca_path: "{{ tls_custom_ca | bool | ternary(bimdata_docker_volume_path + '/ca.crt', omit) }}"
  register: iam_get
  until: iam_get.status == 200
  retries: 36
  delay: 5

- name: IAM - configure default provider
  community.general.keycloak_authentication:
    auth_keycloak_url: "{{ urls['iam'] }}/auth"
    auth_realm: master
    auth_username: "{{ iam_user }}"
    auth_password: "{{ iam_password }}"
    alias: browser
    realm: bimdata
    authenticationExecutions:
      - flowAlias: browser
        requirement: "ALTERNATIVE"
        providerId: "identity-provider-redirector"
        authenticationConfig:
          alias: bimdata_connect_as_default
          config:
            defaultProvider: "{{ iam_default_idp }}"
  environment:
    REQUESTS_CA_BUNDLE: "{{ tls_custom_ca | bool | ternary(bimdata_docker_volume_path + '/ca.crt', omit) }}"
    SSL_CERT_FILE: "{{ tls_custom_ca | bool | ternary(bimdata_docker_volume_path + '/ca.crt', omit) }}"

- name: Connect - initialization
  vars:
    container_name: "{{ _compose_up.containers | selectattr('Service', 'equalto', 'connect') | map(attribute='Name') | first }}"
  block:
    - name: Connect - copy the needed scripts
      ansible.builtin.command: "docker cp {{ bimdata_path }}/scripts/create_connect_provider.py {{ container_name }}:/opt/"
      changed_when: false
    - name: Wait for connect migrations
      ansible.builtin.command: 'docker exec {{ container_name }} bash -c ''/opt/manage.py showmigrations | grep -F -c "[ ]"'''
      register: connect_migration
      until: connect_migration.stdout == "0"
      failed_when: connect_migration.rc != 1
      changed_when: false
      retries: 36
      delay: 10
    - name: Connect - check if we need to initialize the RSA key
      ansible.builtin.command: >
        docker exec {{ container_name }} python manage.py shell -c
        'from oidc_provider.models import RSAKey; print(RSAKey.objects.count())'
      changed_when: false
      register: _connect_rsa_status

    - name: Connect - init needed rsa key # noqa: no-changed-when
      ansible.builtin.command: "docker exec {{ container_name }} python manage.py creatersakey"
      when: _connect_rsa_status.stdout == "0"

    - name: Connect - init provider
      ansible.builtin.command: |
        docker exec connect python create_connect_provider.py
        {{ connect_client_id }} {{ connect_client_secret }} {{ urls['iam'] }}
      register: exec_return
      changed_when:
        - exec_return.rc == 0
        - (exec_return.stdout | lower | replace("'",'"') | from_json).changed | bool
      no_log: true
# End of block

- name: API - initialization
  vars:
    container_name: "{{ _compose_up.containers | selectattr('Service', 'equalto', 'api') | map(attribute='Name') | first }}"
  block:
    - name: Wait for API migrations
      ansible.builtin.command: 'docker exec {{ container_name }} bash -c ''/opt/manage.py showmigrations | grep -F -c "[ ]"'''
      register: api_migration
      until: api_migration.stdout == "0"
      failed_when: api_migration.rc != 1
      changed_when: false
      retries: 36
      delay: 10
    - name: Wait for API to respond
      ansible.builtin.uri:
        url: "{{ urls['api'] }}"
        method: GET
        status_code: 200
        ca_path: "{{ tls_custom_ca | bool | ternary(bimdata_docker_volume_path + '/ca.crt', omit) }}"
      register: connect_get
      until: connect_get.status == 200
      retries: 36
      delay: 5
    - name: API - copy the needed scripts
      ansible.builtin.command: "docker cp {{ bimdata_path }}/scripts/create_apps.py {{ container_name }}:/opt/"
      changed_when: false
    - name: API - init apps
      ansible.builtin.command: |
        docker exec
        {% if tls_custom_ca | bool %}
        -e REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
        -e SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
        {% endif %}
        {{ container_name }} python create_apps.py {{ connect_invitation_secret }}
        {{ connect_invitation_client }} {{ connect_invitation_client_secret }}
        {{ platform_front_client_id }} {{ platform_back_client_id }} {{ platform_back_client_secret }}
        {{ connect_client_id }} {{ connect_client_secret }} {{ marketplace_front_client_id }}
        {{ urls['platform_front'] }} {{ urls['platform_back'] }} {{ urls['marketplace_front'] }}
        {{ urls['connect'] }}
      no_log: true
      register: exec_return
      changed_when:
        - exec_return.rc == 0
        - (exec_return.stdout | lower | replace("'",'"') | from_json).changed | bool
# End of block

- name: Platform back - initialization
  vars:
    container_name: "{{ _compose_up.containers | selectattr('Service', 'equalto', 'platform-back') | map(attribute='Name') | first }}"
  block:
    - name: Platform back - copy the needed scripts
      ansible.builtin.command: "docker cp {{ bimdata_path }}/scripts/create_webhook_notifs.py {{ container_name }}:/opt/"
      changed_when: false
    - name: Wait for platform back migrations
      ansible.builtin.command: 'docker exec {{ container_name }} bash -c ''/opt/manage.py showmigrations | grep -F -c "[ ]"'''
      register: platform_back_migration
      until: platform_back_migration.stdout == "0"
      failed_when: platform_back_migration.rc != 1
      changed_when: false
      retries: 36
      delay: 10
    - name: Wait for platform back to respond
      ansible.builtin.uri:
        url: "{{ urls['platform_back'] }}"
        method: GET
        status_code: 200
        ca_path: "{{ tls_custom_ca | bool | ternary(bimdata_docker_volume_path + '/ca.crt', omit) }}"
      register: connect_get
      until: connect_get.status == 200
      retries: 36
      delay: 5
    - name: Platform back - init apps
      ansible.builtin.command: |
        docker exec
        {% if tls_custom_ca | bool %}
        -e REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
        -e SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
        {% endif %}
        {{ container_name }} python create_webhook_notifs.py
      no_log: false
      register: exec_return
      changed_when:
        - exec_return.rc == 0
        - (exec_return.stdout | lower | replace("'",'"') | from_json).changed | bool
# End of block
