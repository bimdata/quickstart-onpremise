---
- name: "Install Docker prerequisites."
  apt:
    name: "{{ docker_apt_dependencies }}"
    state: present
  environment: "{{ proxy_env }}"

- name: "Add Docker key."
  apt_key:
    url: "{{ docker_apt_key_url }}"
    state: present
  environment: "{{ proxy_env }}"

- name: "Get deb architecture"
  command: "dpkg --print-architecture"
  register: deb_arch
  changed_when: false
  check_mode: false

- name: "Add Docker repository."
  apt_repository:
    filename: docker
    repo: "deb [arch={{ deb_arch.stdout }}] {{ docker_apt_repo_url }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}"
    update_cache: true
    state: present
  environment: "{{ proxy_env }}"

- name: "Get installed Docker version."
  command: "dpkg-query --showformat='${Version}' --show {{ docker_pkg_name }}"
  register: docker_pkg_installed_version
  failed_when: false
  changed_when: false
  check_mode: false

- name: "Unhold Docker version."
  dpkg_selections:
    name: "{{ docker_pkg_name }}"
    selection: install
  when: not docker_pkg_version_hold or (docker_pkg_installed_version.stdout and docker_pkg_installed_version.stdout != docker_pkg_version)

- name: "Install Docker."
  apt:
    name: "{{ docker_pkg_name }}{% if docker_pkg_version is defined and docker_pkg_version != '' %}={{ docker_pkg_version }}{% endif %}"
    cache_valid_time: 3600
    state: present
  environment: "{{ proxy_env }}"
  notify: "Restart Docker."

- name: "Hold Docker version."
  dpkg_selections:
    name: "{{ docker_pkg_name }}"
    selection: "hold"
  when: docker_pkg_version_hold

- name: "Create docker service systemd directory."
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    owner: root
    group: root
    mode: 0640

- name: "Configure docker proxy if needed."
  template:
    src: http-proxy.conf.j2
    dest: /etc/systemd/system/docker.service.d/http-proxy.conf
    owner: root
    group: root
    mode: 0640
  when: >
    (http_proxy is defined and http_proxy | length)
    or (https_proxy is defined and https_proxy | length)
  notify: "Restart Docker."

- name: "Flush handlers to avoid any conflict with the desired state."
  meta: flush_handlers

- name: "Ensure Docker is started and enabled at boot."
  service:
    name: "{{ docker_svc_name }}"
    state: started
    enabled: true
  ignore_errors: "{{ ansible_check_mode }}"

- name: "Include tasks to install docker-compose if needed."
  include_tasks: compose.yml
  when: docker_install_compose | bool

- name: "Include tasks to login to the docker registries."
  include_tasks: registries.yml
  when:
    - docker_registries is defined
    - docker_registries | length
